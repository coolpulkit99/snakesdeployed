{"version":3,"sources":["components/Row.js","App.js","serviceWorker.js","components/Input.js","index.js"],"names":["Row","props","className","rowval","map","ind","gameOver","App","gridv","Array","row","size","temp","col","push","Math","floor","tempvaradd","useState","score","updateScore","grid","updateGrid","foodpos","updateFood","snakepos","updateSnake","snakedir","updateDir","document","addEventListener","e","keyCode","useEffect","interval","setInterval","clearInterval","dir","element","x","y","addNewPos","length","lastpos","newX","random","newY","shift","countcollision","forEach","removeEventListener","processArray","Boolean","window","location","hostname","match","setSize","ReactDOM","render","StrictMode","id","getElementById","value","Input","placeholder","onClick","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b19b8c42.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Row.css\"\r\n\r\nfunction Row(props) {\r\n  return (\r\n    <div className=\"Row\">\r\n      {\r\n      props.rowval.map((ind) => {\r\n        return <div className={\"cellClass class\" + ind}/>\r\n      })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Row from \"./components/Row\";\n\nfunction handleGrid() {\n  // console.log(\"/c\");\n\n}\nfunction handleKey(e) {\n\n}\n\n//update array with new positions\nfunction processArray(snakepos, foodpos, size) {\n  let gridv = new Array();\n  for (let row = 0; row < size; row++) {\n    let temp = new Array();\n    for (let col = 0; col < size; col++) {\n      temp.push(0);\n    }\n    gridv.push(temp);\n  }\n  snakepos.map((ind) => {\n    // console.log(ind)\n    gridv[ind[0]][ind[1]] = 1;\n  })\n  gridv[foodpos[0]][foodpos[1]] = 2;\n  return gridv;\n}\n\n//create new snake position\n\nfunction addNewPos(dir, element, size) {\n  let x = element[0];\n  let y = element[1];\n\n  switch (dir) {\n    case 1: y -= 1;\n      break;\n    case 2: x += 1\n      break;\n    case 3: y += 1\n      break;\n    case 4: x -= 1;\n      break;\n  };\n  if (x < 0)\n    x = size - 1;\n  if (x > size - 1)\n    x = 0;\n  if (y < 0)\n    y = size - 1;\n  if (y > size - 1)\n    y = 0;\n  return [x, y];\n}\n\nlet gameOver = 0;\n//main react component\nfunction App(props) {\n\n  let gridv = new Array();\n  for (let row = 0; row < props.size; row++) {\n    let temp = new Array();\n    for (let col = 0; col < props.size; col++) {\n      temp.push(0);\n    }\n    gridv.push(temp);\n  }\n  //inital positions \n  gridv[Math.floor(props.size / 2)][Math.floor(props.size / 2)] = 2;\n  let tempvaradd = Math.floor(props.size / 2) + 1;\n  // console.log(Math.floor(props.size / 2));\n  gridv[tempvaradd][tempvaradd] = 1;\n  //1 is snake\n  //2 is food\n\n  const [score, updateScore] = useState(0);\n  const [grid, updateGrid] = useState(gridv);\n  const [foodpos, updateFood] = useState([Math.floor(props.size / 2), Math.floor(props.size / 2)]);\n  const [snakepos, updateSnake] = useState([[Math.floor(props.size / 2) + 1, Math.floor(props.size / 2) + 1]]);\n  const [snakedir, updateDir] = useState(1);\n  //1 left\n  //3 right\n  //2 down\n  //4 up \n  document.addEventListener('keydown', (e) => {\n    switch (e.keyCode) {\n      case 37:\n        updateDir(4);\n        break;\n      case 38:\n        updateDir(1);\n        break;\n      case 39:\n        updateDir(2);\n        break;\n      case 40:\n        updateDir(3);\n        break;\n    }\n    // console.log(snakedir);\n\n  });\n\n  useEffect(() => {\n    //game timer\n    const interval = setInterval(() => {\n\n      if (gameOver == 1)\n        return () => clearInterval(interval);\n      // console.log(snakepos);\n\n      snakepos.push(addNewPos(snakedir, snakepos[snakepos.length - 1], props.size));\n      let lastpos = snakepos[snakepos.length - 1];\n      //check if food is eaten\n      if (lastpos[0] == foodpos[0] && lastpos[1] == foodpos[1]) {\n        updateScore(score + 1);\n        let newX = Math.floor(Math.random() * props.size);\n        let newY = Math.floor(Math.random() * props.size);\n        updateFood([newX, newY]);\n      } else {\n        snakepos.shift();\n      }\n\n      let countcollision = 0;\n      snakepos.forEach(element => {\n        if (element[0] == snakepos[snakepos.length - 1][0] && element[1] == snakepos[snakepos.length - 1][1])\n          countcollision += 1;\n      });\n      if (countcollision > 1) {\n        gameOver = 1;\n\n        document.removeEventListener('keydown', () => { });\n\n        let gridv = new Array();\n        for (let row = 0; row < props.size; row++) {\n          let temp = new Array();\n          for (let col = 0; col < props.size; col++) {\n            temp.push(0);\n          }\n          gridv.push(temp);\n        }\n        for (let row = 0; row < props.size; row++) {\n          for (let col = 0; col < props.size; col++) {\n            gridv[row][col] = 2;\n            // setTimeout(() => { updateGrid(gridv) }, 1000);\n          }\n\n        }\n        updateGrid(gridv)\n\n        return;\n      }\n      // console.log(gameOver);\n      // if (snakepos[0] >= 0 && snakepos[0] < 10 && snakepos[1] >= 0 && snakepos[1] < 10) \n      {\n        updateSnake(snakepos);\n        // console.log(\"move\");\n        updateGrid(processArray(snakepos, foodpos, props.size));\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  });\n\n\n  return (\n    <div>\n      <label>Score:{score}</label>\n      <div className=\"Board\">\n        {grid.map((ind) =>\n          <Row rowval={ind} />\n        )}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport App from './../App';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction setSize(){\r\n    // alert(document.getElementById(\"sizebox\").value);\r\n    // console.log(document.getElementById(\"sizebox\").value);\r\n    \r\nReactDOM.render(\r\n    <React.StrictMode>\r\n            \r\n      <App id=\"boardgame\" size={document.getElementById(\"sizebox\").value} />\r\n\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n}\r\n\r\nfunction Input(props) {\r\n  return (\r\n    <div>\r\n      <input id=\"sizebox\" placeholder=\"Size...\"></input>\r\n      <button onClick={setSize}>Start Game</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Input from './components/Input';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n<Input></Input>\n    {/* <App id=\"boardgame\" size={20}/> */}\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}